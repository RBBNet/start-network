#!/usr/bin/env bash

__EXEC__="$(realpath -s ${BASH_SOURCE[0]})"
__DIRE__="${__EXEC__%/*}"
__FILE__="$(readlink -f ${BASH_SOURCE[0]})"
__DIR__="${__FILE__%/*}"

set -e

source .env

source "${__DIR__}/common/besu.sh"
source "${__DIR__}/common/json.sh"

CONFIG_ROOT=${CONFIG_ROOT:-"${PWD}/.env.configs"}
VOLUMES_ROOT=${VOLUMES_ROOT:-"${PWD}/volumes"}

# configuration

[[ -n "${BOOT_NODES+x}" ]] || BOOT_NODES=${BOOT_NODES:-$(seq -f "${BOOT_PREFIX:-boot}%.0f" ${BOOT_COUNT:-0})}
[[ -n "${VALIDATOR_NODES+x}" ]] || VALIDATOR_NODES=${VALIDATOR_NODES:-$(seq -f "${VALIDATOR_PREFIX:-validator}%.0f" ${VALIDATOR_COUNT:-0})}
[[ -n "${WRITER_NODES+x}" ]] || WRITER_NODES=${WRITER_NODES:-$(seq -f "${WRITER_PREFIX:-writer}%.0f" ${WRITER_COUNT:-0})}

ALL_NODES="${BOOT_NODES} ${VALIDATOR_NODES} ${WRITER_NODES}"

STATIC_NODES_PATH="${CONFIG_ROOT}/static-nodes.json"
GENESIS_PATH="${CONFIG_ROOT}/genesis.json"


mkdir -p "${CONFIG_ROOT}" "${VOLUMES_ROOT}"

# create nodes
for NODE_NAME in ${ALL_NODES}; do
	NODE_CONFIG_PATH="${CONFIG_ROOT}/nodes/${NODE_NAME}"
	NODE_DATA_PATH="${VOLUMES_ROOT}/${NODE_NAME}"

	mkdir -p "${NODE_CONFIG_PATH}" "${NODE_DATA_PATH}"
	chmod a+w "${NODE_CONFIG_PATH}" "${NODE_DATA_PATH}"

	if [[ -f "${NODE_CONFIG_PATH}/key" ]]; then
		continue
	fi

	besu_generate_keypair "${NODE_CONFIG_PATH}"
done

# create/expand static-nodes.json
VALIDATOR_ENODES=$(for NODE_NAME in ${VALIDATOR_NODES}; do
	NODE_CONFIG_PATH="${CONFIG_ROOT}/nodes/${NODE_NAME}"
	besu_get_enode ${NODE_CONFIG_PATH}
done | json_array)

if [[ -f "${STATIC_NODES_PATH}" ]]; then
	cat "${STATIC_NODES_PATH}"
else
	printf '[]'
fi | jq -s "(.[0] + ${VALIDATOR_ENODES} | unique)" >"${STATIC_NODES_PATH}"

# create genesis.json
if ! besu_genesis_ready "${GENESIS_PATH}"; then
	GENESIS_EXTRADATA=$(for NODE_NAME in ${VALIDATOR_NODES}; do
		NODE_CONFIG_PATH="${CONFIG_ROOT}/nodes/${NODE_NAME}"
		besu_get_address "${NODE_CONFIG_PATH}"
	done | json_array | besu_encode_rlp)

	BOOT_ENODES=$(for NODE_NAME in ${BOOT_NODES}; do
		NODE_CONFIG_PATH="${CONFIG_ROOT}/nodes/${NODE_NAME}"
		besu_get_enode "${NODE_CONFIG_PATH}"
	done | json_array)

	TIMESTAMP_HEX=$(printf '0x%X' $(date +%s))

	if [[ ! -f "${GENESIS_PATH}" ]]; then
		besu_genesis_base |
			jq ".extraData = \"${GENESIS_EXTRADATA}\"" |
			jq ".timestamp = \"${TIMESTAMP_HEX}\"" |
			jq ".config.discovery.bootnodes = (.config.discovery.bootnodes + ${BOOT_ENODES} | unique)" >"${GENESIS_PATH}"
	fi
fi

# render templates
"${__DIR__}/env-dump" | "${__DIR__}/template-render"
