version: '3.4'

x-defaults:
  logging: &logging-default
    options:
      max-size: '10m'
      max-file: '5'
    driver: json-file

  proxy: &proxy-default
    http_proxy:
    https_proxy:
    no_proxy:
    HTTP_PROXY:
    HTTPS_PROXY:
    NO_PROXY:

  localization: &localization-default
    TZ: America/Sao_Paulo
    LANG: en_US.UTF-8

  besu-env-config: &besu-env-config-default
    LOG4J_CONFIGURATION_FILE: "/var/lib/besu/log.xml"
    BESU_DATA_PATH: "/var/lib/besu"
    BESU_GENESIS_FILE: "/var/lib/besu/genesis.json"
    BESU_RPC_HTTP_ENABLED: "true"
    BESU_RPC_HTTP_API: "ADMIN,ETH,NET,IBFT,WEB3,DEBUG"
    BESU_RPC_HTTP_CORS_ORIGINS: "*"
    BESU_HOST_ALLOWLIST: "*"
    BESU_DISCOVERY_ENABLED: "true"
    BESU_STATIC_NODES_FILE: "/var/lib/besu/static-nodes.json"
    BESU_BOOTNODES:

  besu-log-config: &besu-log-config
    source: log-config
    target: /var/lib/besu/log.xml

  besu-genesis-config: &besu-genesis-config
    source: genesis-config
    target: /var/lib/besu/genesis.json

  besu-static-nodes-config: &besu-static-nodes-config
    source: static-nodes-config
    target: /var/lib/besu/static-nodes.json

  besu-node: &besu-node-default
    image: ${IMAGE_BESU}
    logging: *logging-default
    environment:
      << : *localization-default
      << : *besu-env-config-default
    configs:
      - *besu-log-config
      - *besu-genesis-config
      - *besu-static-nodes-config
    command: >-
      --Xdns-enabled=true
      --Xdns-update-enabled=true

services:

  boot1:
    << : *besu-node-default
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.boot1.rule=Host(`rbb-boot1.dsv.bndes.net`)"
        - "traefik.http.routers.boot1.entrypoints=web"
        - "traefik.http.routers.boot1.service=boot1-rpc"
        - "traefik.http.services.boot1-rpc.loadbalancer.server.port=8545"
        - "traefik.http.services.boot1-rpc.loadbalancer.passhostheader=true"
    volumes:
      - ${VOLUMES_ROOT}/boot1/:/var/lib/besu/

  boot2:
    << : *besu-node-default
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.boot2.rule=Host(`rbb-boot2.dsv.bndes.net`)"
        - "traefik.http.routers.boot2.entrypoints=web"
        - "traefik.http.routers.boot2.service=boot2-rpc"
        - "traefik.http.services.boot2-rpc.loadbalancer.server.port=8545"
        - "traefik.http.services.boot2-rpc.loadbalancer.passhostheader=true"
    volumes:
      - ${VOLUMES_ROOT}/boot2/:/var/lib/besu/

  writer1:
    << : *besu-node-default
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.writer1.rule=Host(`rbb-writer1.dsv.bndes.net`)"
        - "traefik.http.routers.writer1.entrypoints=web"
        - "traefik.http.routers.writer1.service=writer1-rpc"
        - "traefik.http.services.writer1-rpc.loadbalancer.server.port=8545"
        - "traefik.http.services.writer1-rpc.loadbalancer.passhostheader=true"
    volumes:
      - ${VOLUMES_ROOT}/writer1/:/var/lib/besu/

  writer2:
    << : *besu-node-default
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.writer2.rule=Host(`rbb-writer2.dsv.bndes.net`)"
        - "traefik.http.routers.writer2.entrypoints=web"
        - "traefik.http.routers.writer2.service=writer2-rpc"
        - "traefik.http.services.writer2-rpc.loadbalancer.server.port=8545"
        - "traefik.http.services.writer2-rpc.loadbalancer.passhostheader=true"
    volumes:
      - ${VOLUMES_ROOT}/writer2/:/var/lib/besu/

  validator1:
    << : *besu-node-default
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.validator1.rule=Host(`rbb-validator1.dsv.bndes.net`)"
        - "traefik.http.routers.validator1.entrypoints=web"
        - "traefik.http.routers.validator1.service=validator1-rpc"
        - "traefik.http.services.validator1-rpc.loadbalancer.server.port=8545"
        - "traefik.http.services.validator1-rpc.loadbalancer.passhostheader=true"
    volumes:
      - ${VOLUMES_ROOT}/validator1/:/var/lib/besu/

  validator2:
    << : *besu-node-default
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.validator2.rule=Host(`rbb-validator2.dsv.bndes.net`)"
        - "traefik.http.routers.validator2.entrypoints=web"
        - "traefik.http.routers.validator2.service=validator2-rpc"
        - "traefik.http.services.validator2-rpc.loadbalancer.server.port=8545"
        - "traefik.http.services.validator2-rpc.loadbalancer.passhostheader=true"
    volumes:
      - ${VOLUMES_ROOT}/validator2/:/var/lib/besu/

  validator3:
    << : *besu-node-default
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.validator3.rule=Host(`rbb-validator3.dsv.bndes.net`)"
        - "traefik.http.routers.validator3.entrypoints=web"
        - "traefik.http.routers.validator3.service=validator3-rpc"
        - "traefik.http.services.validator3-rpc.loadbalancer.server.port=8545"
        - "traefik.http.services.validator3-rpc.loadbalancer.passhostheader=true"
    volumes:
      - ${VOLUMES_ROOT}/validator3/:/var/lib/besu/

  validator4:
    << : *besu-node-default
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.validator4.rule=Host(`rbb-validator4.dsv.bndes.net`)"
        - "traefik.http.routers.validator4.entrypoints=web"
        - "traefik.http.routers.validator4.service=validator4-rpc"
        - "traefik.http.services.validator4-rpc.loadbalancer.server.port=8545"
        - "traefik.http.services.validator4-rpc.loadbalancer.passhostheader=true"
    volumes:
      - ${VOLUMES_ROOT}/validator4/:/var/lib/besu/

  traefik:
    image: "traefik:v2.6"
    deploy:
      placement:
        constraints:
          - node.role == manager
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=true"
      - "--providers.docker.constraints=Label(`com.docker.stack.namespace`,`${STACK_NAME}`) && !LabelRegex(`com.docker.stack.image`,`traefik:.+`)"
      - "--entrypoints.web.address=:80"
    ports:
      - "${APP_WEB_PORT}:80"
      - "${APP_TRAEFIK_PORT}:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

configs:
  genesis-config:
      file: .env.configs/genesis.json
  static-nodes-config:
      file: .env.configs/static-nodes.json
  log-config:
      file: .env.configs/log.xml
